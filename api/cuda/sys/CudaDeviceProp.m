function prop = CudaDeviceProp(varargin) %#codegen
%Maps an opaque object into a CudaDeviceProp object
%
%  CudaDeviceProp() simply returns a definition of the m2c_opaque_type,
%  suitable in the argument specification for codegen.
%
%  CudaDeviceProp(obj) or CudaDeviceProp(obj, false)
%  converts obj into an cudaDeviceProp object.
%
%  CudaDeviceProp(obj, 'wrap') or CudaDeviceProp(obj, true) wraps the obj
%  into an opaque object. This should be used if the opaque object needs
%  to be returned to MATLAB.
%
% See http://docs.nvidia.com/cuda/cuda-runtime-api/structcudaDeviceProp.html

coder.inline('always');

if nargin==0
    prop = coder.typeof(struct('name', coder.typeof(char(0),[1,256],[0,1]), ...
        'multiProcessorCount', int32(0), ...
        'maxThreadsPerMultiProcessor', int32(0), ...
        'maxThreadsPerBlock', int32(0), ...
        'warpSize', int32(0), ...
        'concurrentKernels', int32(0), ...
        'totalGlobalMem', uint64(0), ...
        'sharedMemPerBlock', uint64(0), ...
        'sharedMemPerMultiprocessor', uint64(0), ...
        'totalConstMem', uint64(0), ...
        'clockRate', int32(0), ...
        'asyncEngineCount', int32(0), ...
        'computeMode', int32(0), ...
        'major', int32(0), ...
        'minor', int32(0), ...
        'maxGridSize', coder.typeof(int32(0),[1,3]), ...        
        'maxThreadsDim', coder.typeof(int32(0),[1,3]), ...        
        'isMultiGpuBoard', int32(0), ...
        'canMapHostMemory', int32(0), ...
        'managedMemory', int32(0), ...
        'unifiedAddressing', int32(0), ...
        'globalL1CacheSupported', int32(0), ...
        'l2CacheSize', int32(0), ...
        'regsPerBlock', int32(0), ...
        'regsPerMultiprocessor', int32(0), ...
        'memoryBusWidth', int32(0), ...
        'memoryClockRate', int32(0), ...
        'memPitch', uint64(0), ...
        'textureAlignment', uint64(0), ...
        'deviceOverlap', int32(0), ...
        'kernelExecTimeoutEnabled', int32(0), ...
        'integrated', int32(0), ...
        'ECCEnabled', int32(0), ...
        'pciBusID', int32(0), ...
        'tccDriver', int32(0)));
    
elseif nargin==1
    % Convert from MATLAB struct to an opaque cudaDeviceProp object
    prop_obj = coder.opaque('struct cudaDeviceProp');
    t_prop = coder.opaque('struct cudaDeviceProp *');
    t_prop = coder.ceval(' ', coder.wref(prop_obj));
    
    prop_in = varargin{1};
    coder.cstructname(prop_in, 'McudaDeviceProp');
    
    m2c_set_cstruct_field(t_prop, 'multiProcessorCount', prop_in.multiProcessorCount);
    m2c_set_cstruct_field(t_prop, 'maxThreadsPerMultiProcessor', prop_in.maxThreadsPerMultiProcessor);
    m2c_set_cstruct_field(t_prop, 'maxThreadsPerBlock', prop_in.maxThreadsPerBlock);
    m2c_set_cstruct_field(t_prop, 'warpSize', prop_in.warpSize);
    m2c_set_cstruct_field(t_prop, 'concurrentKernels', prop_in.concurrentKernels);
    m2c_set_cstruct_field(t_prop, 'totalGlobalMem', prop_in.totalGlobalMem);
    m2c_set_cstruct_field(t_prop, 'sharedMemPerBlock', prop_in.sharedMemPerBlock);
    m2c_set_cstruct_field(t_prop, 'sharedMemPerMultiprocessor', prop_in.sharedMemPerMultiprocessor);
    m2c_set_cstruct_field(t_prop, 'totalConstMem', prop_in.totalConstMem);
    m2c_set_cstruct_field(t_prop, 'clockRate', prop_in.clockRate);
    m2c_set_cstruct_field(t_prop, 'asyncEngineCount', prop_in.asyncEngineCount);
    m2c_set_cstruct_field(t_prop, 'major', prop_in.major);
    m2c_set_cstruct_field(t_prop, 'minor', prop_in.minor);
    m2c_set_cstruct_field(t_prop, 'computeMode', prop_in.computeMode);
    m2c_set_cstruct_field(t_prop, 'isMultiGpuBoard', prop_in.isMultiGpuBoard);
    m2c_set_cstruct_field(t_prop, 'canMapHostMemory', prop_in.canMapHostMemory);
    m2c_set_cstruct_field(t_prop, 'managedMemory', prop_in.managedMemory);
    m2c_set_cstruct_field(t_prop, 'unifiedAddressing', prop_in.unifiedAddressing);
    m2c_set_cstruct_field(t_prop, 'globalL1CacheSupported', prop_in.globalL1CacheSupported);
    m2c_set_cstruct_field(t_prop, 'l2CacheSize', prop_in.l2CacheSize);
    m2c_set_cstruct_field(t_prop, 'regsPerBlock', prop_in.regsPerBlock);
    m2c_set_cstruct_field(t_prop, 'regsPerMultiprocessor', prop_in.regsPerMultiprocessor);
    m2c_set_cstruct_field(t_prop, 'memoryBusWidth', prop_in.memoryBusWidth);
    m2c_set_cstruct_field(t_prop, 'memoryClockRate', prop_in.memoryClockRate);
    m2c_set_cstruct_field(t_prop, 'memPitch', prop_in.memPitch);
    m2c_set_cstruct_field(t_prop, 'textureAlignment', prop_in.textureAlignment);
    m2c_set_cstruct_field(t_prop, 'deviceOverlap', prop_in.deviceOverlap);
    m2c_set_cstruct_field(t_prop, 'kernelExecTimeoutEnabled', prop_in.kernelExecTimeoutEnabled);
    m2c_set_cstruct_field(t_prop, 'integrated', prop_in.integrated);
    m2c_set_cstruct_field(t_prop, 'ECCEnabled', prop_in.ECCEnabled);
    m2c_set_cstruct_field(t_prop, 'pciBusID', prop_in.pciBusID);
    m2c_set_cstruct_field(t_prop, 'tccDriver',  prop_in.tccDriver);
    
    name = [prop_in.name char(0)];
    % Convert an opaque cudaDeviceProp object into a MATLAB struct
    coder.ceval('strcpy', m2c_get_cstruct_field(t_prop, 'name', 'char *', true), ...
        coder.rref(name));
    maxThreadsDim = prop_in.maxThreadsDim;
    coder.ceval('memcpy', m2c_get_cstruct_field(t_prop, 'maxThreadsDim', ...
        'int *', true), coder.rref(maxThreadsDim), int32(12));
    maxGridSize = prop_in.maxGridSize;
    coder.ceval('memcpy', m2c_get_cstruct_field(t_prop, 'maxGridSize', ...
        'int *', true), coder.rref(maxGridSize), int32(12));
    prop = prop_obj;
elseif nargin==2
    prop_obj = varargin{1};
    t_prop = coder.opaque('struct cudaDeviceProp *');
    t_prop = coder.ceval(' ', coder.rref(prop_obj));
    
    % Convert an opaque cudaDeviceProp object into a MATLAB struct
    name = char(zeros(1,256));
    coder.varsize('name', [1, 256], [0,1]);
    coder.ceval('strcpy', coder.ref(name), ...
        m2c_get_cstruct_field(t_prop, 'name', 'const char *', true));
    slen = int32(0);
    slen = coder.ceval('strlen', m2c_get_cstruct_field(t_prop, 'name', 'const char *', true));
    maxThreadsDim = zeros(1,3,'int32');
    coder.ceval('memcpy', coder.wref(maxThreadsDim), ...
        m2c_get_cstruct_field(t_prop, 'maxThreadsDim', 'const int *', true), int32(12));
    maxGridSize = zeros(1,3,'int32');
    coder.ceval('memcpy', coder.wref(maxGridSize), ...
        m2c_get_cstruct_field(t_prop, 'maxGridSize', 'const int *', true), int32(12));
    
    prop = struct(...
        'name', name(1:slen), ...
        'multiProcessorCount', int32(0), ...
        'maxThreadsPerMultiProcessor', int32(0), ...
        'maxThreadsPerBlock', int32(0), ...
        'warpSize', int32(0), ...
        'concurrentKernels', int32(0), ...
        'totalGlobalMem', uint64(0), ...
        'sharedMemPerBlock', uint64(0), ...
        'sharedMemPerMultiprocessor', uint64(0), ...
        'totalConstMem', uint64(0), ...
        'clockRate', int32(0), ...
        'asyncEngineCount', int32(0), ...
        'computeMode', int32(0), ...
        'major', int32(0), ...
        'minor', int32(0), ...
        'maxGridSize', maxGridSize, ...
        'maxThreadsDim', maxThreadsDim, ...
        'isMultiGpuBoard', int32(0), ...
        'canMapHostMemory', int32(0), ...
        'managedMemory', int32(0), ...
        'unifiedAddressing', int32(0), ...
        'globalL1CacheSupported', int32(0), ...
        'l2CacheSize', int32(0), ...
        'regsPerBlock', int32(0), ...
        'regsPerMultiprocessor', int32(0), ...
        'memoryBusWidth', int32(0), ...
        'memoryClockRate', int32(0), ...
        'memPitch', uint64(0), ...
        'textureAlignment', uint64(0), ...
        'deviceOverlap', int32(0), ...
        'kernelExecTimeoutEnabled', int32(0), ...
        'integrated', int32(0), ...
        'ECCEnabled', int32(0), ...
        'pciBusID', int32(0), ...
        'tccDriver', int32(0));    
    coder.cstructname(prop, 'McudaDeviceProp');
    
    prop.multiProcessorCount = m2c_get_cstruct_field(t_prop, 'multiProcessorCount', 'int32');
    prop.maxThreadsPerMultiProcessor = m2c_get_cstruct_field(t_prop, 'maxThreadsPerMultiProcessor', 'int32');    
    prop.maxThreadsPerBlock = m2c_get_cstruct_field(t_prop, 'maxThreadsPerBlock', 'int32');
    prop.warpSize = m2c_get_cstruct_field(t_prop, 'warpSize', 'int32');
    prop.concurrentKernels = m2c_get_cstruct_field(t_prop, 'concurrentKernels', 'int32');

    prop.totalGlobalMem = m2c_get_cstruct_field(t_prop, 'totalGlobalMem', 'uint64');
    prop.sharedMemPerBlock = m2c_get_cstruct_field(t_prop, 'sharedMemPerBlock', 'uint64');
    prop.sharedMemPerMultiprocessor = m2c_get_cstruct_field(t_prop, 'sharedMemPerMultiprocessor', 'uint64');
    prop.totalConstMem = m2c_get_cstruct_field(t_prop, 'totalConstMem', 'uint64');
    prop.clockRate = m2c_get_cstruct_field(t_prop, 'clockRate', 'int32');
    prop.asyncEngineCount = m2c_get_cstruct_field(t_prop, 'asyncEngineCount', 'int32');
    prop.computeMode = m2c_get_cstruct_field(t_prop, 'computeMode', 'int32');
    prop.major = m2c_get_cstruct_field(t_prop, 'major', 'int32');
    prop.minor = m2c_get_cstruct_field(t_prop, 'minor', 'int32');
    prop.isMultiGpuBoard = m2c_get_cstruct_field(t_prop, 'isMultiGpuBoard', 'int32');
    prop.canMapHostMemory = m2c_get_cstruct_field(t_prop, 'canMapHostMemory', 'int32');
    prop.managedMemory = m2c_get_cstruct_field(t_prop, 'managedMemory', 'int32');
    prop.unifiedAddressing = m2c_get_cstruct_field(t_prop, 'unifiedAddressing', 'int32');
    prop.globalL1CacheSupported = m2c_get_cstruct_field(t_prop, 'globalL1CacheSupported', 'int32');
    prop.l2CacheSize = m2c_get_cstruct_field(t_prop, 'l2CacheSize', 'int32');
    prop.regsPerBlock = m2c_get_cstruct_field(t_prop, 'regsPerBlock', 'int32');
    prop.regsPerMultiprocessor = m2c_get_cstruct_field(t_prop, 'regsPerMultiprocessor', 'int32');
    prop.memoryBusWidth = m2c_get_cstruct_field(t_prop, 'memoryBusWidth', 'int32');
    prop.memoryClockRate = m2c_get_cstruct_field(t_prop, 'memoryClockRate', 'int32');
    prop.memPitch = m2c_get_cstruct_field(t_prop, 'memPitch', 'uint64');
    prop.textureAlignment = m2c_get_cstruct_field(t_prop, 'textureAlignment', 'uint64');
    prop.deviceOverlap = m2c_get_cstruct_field(t_prop, 'deviceOverlap', 'int32');
    prop.kernelExecTimeoutEnabled = m2c_get_cstruct_field(t_prop, 'kernelExecTimeoutEnabled', 'int32');
    prop.integrated = m2c_get_cstruct_field(t_prop, 'integrated', 'int32');
    prop.ECCEnabled = m2c_get_cstruct_field(t_prop, 'ECCEnabled', 'int32');
    prop.pciBusID = m2c_get_cstruct_field(t_prop, 'pciBusID', 'int32');
    prop.tccDriver = m2c_get_cstruct_field(t_prop, 'tccDriver', 'int32');
    
    m2c_rref(prop_obj);
else
    m2c_error('Undefined');
end
end
