function writeExeFile(funcname, cpath, m2c_opts, alt_nlhs, alt_nrhs)
% Write out _exe file
outCfile = [cpath funcname '_exe.' m2c_opts.suf];

[fid,msg] = fopen(outCfile, 'w');
if (fid<0); error('m2c:OpenFile', msg); end

fprintf(fid, '%s\n', ...
    '/*', ...
    [' * Auxiliary code for standalone executable of ' funcname], ' *', ...
    ' * C source code generated by m2c.', ...
    '*', ' */', '', ...
    '/* Include declaration of some helper functions. */', ...
    '#include "lib2exe_helper.c"', '');

% Print into a string a mexFunction for the function with the given
% numbers of input and output arguments.
maxin = max(alt_nrhs);  nIn = max(maxin,1);
maxout = max(alt_nlhs); nOut = max(maxout,1);

str = sprintf('%s\n', ...
    'int main(int argc, const char * const argv[]) {', ...
    '    int nlhs, nrhs;', ...
    ['    mxArray *prhs[' int2str(nIn) '] = {' nullptrs(nIn) '};'], ...
    ['    mxArray *plhs[' int2str(nOut) '] = {' nullptrs(nOut) '};'], '', ...
    '    if (argc<5) {', ...
    '        printf("Too few input arguments. Usage:\n\t %s <nrhs> <infile> <nlhs> <outfile>\n", argv[0]);', ...
    '        return(EXIT_FAILURE);', ...
    '    }', '', ...
    '    nrhs = atoi(argv[1]);', ...
    '    if (nrhs && readInputArgs(argv[2], nrhs, prhs)) {', ...
    '       return(EXIT_FAILURE);', ...
    '    }', '', ...
    '    nlhs = atoi(argv[3]);', '', ...
    '    /* Call the MEX function. */', ...
    '    mexFunction(nlhs, plhs, nrhs, (const mxArray **)prhs);', '' ...
    );

str = sprintf('\n%s', str, '', ...
    ['    if (writeOuputArgs(argv[4], ' int2str(nOut) ', plhs)) {'], ...
    '        return(EXIT_FAILURE);', ...
    '    }', '');

for i=1:nIn
    str = sprintf('\n%s', str, ...
        ['    if (prhs[' int2str(i-1) ']) mxDestroyArray(prhs[' int2str(i-1) ']);']);
end

for i=1:nOut
    str = sprintf('\n%s', str, ...
        ['    if (plhs[' int2str(i-1) ']) mxDestroyArray(plhs[' int2str(i-1) ']);']);
end

str = sprintf('\n%s', str, '', ...
    '    return(EXIT_SUCCESS);', ...
    '}');

% Remove two consecutive empty lines
while ~isempty(regexp(str, '^\n\n', 'once'))
    str = regexprep(str, '^(\n)\n', '$1');
end
while ~isempty(regexp(str, '\n\n\n', 'once'))
    str = regexprep(str, '(\n\n)\n', '$1');
end

fprintf(fid, '%s', str);
fclose(fid);
end

function s = nullptrs(n) 
  s = sprintf('%d, ', zeros(n,1));
  s = s(1:end-2);
end
